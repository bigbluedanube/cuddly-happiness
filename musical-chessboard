HARDWARE NEEDS
    Get a chessboard, preferably glass--frosted = black, clear = white
    Add an LED beneath each square on the board (there will be a breadboard beneath, so maybe wood?)
    Add a photoresistor to trigger LED lights and sounds (uncovered/covered square = on/off)

SOFTWARE NEEDS
    Notation software: violin harmonics - 3rd position, so 1 sul G = C4
        human performers or chess players or the software itself?
        ideally something that can notate/playback natural harmonics
        may have to use a more accessible insturment, 
        or just format for chess players instead of musicians
    OSC (or something else) to connect board to PD, SC or Max patch.
    Pd, SC, or Max/MSP
    If PD:
        a fiddle-like object to analyze frequencies and execute commands
    elif SC:
        OSC to connect to literally everything else
    elif Max/MSP:
        create fiddle and trigger LED (maybe PD can do this, too?)
    else:
        use gameplay code to make LEDs respond to frequencies "heard" by PC/SC/Max/other.
BUT - the noise floor is a problem--> highly sensitive mics? Piezos?

// possible variables for specific frequencies--currently only for violin //
varA = 1 sul G // high D //
varB = 4 sul G // 8va //
varC = 1 sul D // high A //
varD = 4 sul D // 8va //
varE = 1 sul A // high E //
varF = 4 sul A // 8va //
varG = 1 sul E // 8va high E //
varH = 4 sul E // 8va //

BASIC MOVEMENT FOR ANY PIECE
if varA:
    moveForward 1 space
if varB:
    moveBack 1 space
if varC:
    moveLeft 1 space
if varD:
    moveRight 1 space
if varE:
    moveForwardLeft 1 space
if varF:
    moveForwardRight 1 space
if varG:
    moveBackLeft 1 space
if varH:
    moveBackRight 1 space
    
// how would pieces move multiple spaces? 
Should it be time-sensitive?
example: 2000ms = 2 spaces? //


SPECIFIC METHODS FOR EACH PIECE
  def Pawn
    // method for normal gameplay //
    // method for normal pawn captures //
    // method for en passant captures //
    method for Start_of_Game:
        moveOneSpace
        moveTwoSpaces
    def pawnPromotion:
        method for pawntoRook
            call musical-chess.Rook
            // piece plays as Rook from here on out//
        method for pawntoKnight
            call musical-chess.Knight
            // piece plays as Knight from here on out//
        method for pawntoBishop
            call musical-chess.Bishop
            // piece plays as Bishop from here on out//
        method for pawntoQueen:
            call musical-chess.Queen
            // piece plays as Queen from here on out//

  def Rook
    def minSpaces
    def maxSpaces
    def Castle [for exchanging places with the King]
    
    // must take into account how many spaces are available, including pieces in the path //
    // def max = maximum number of spaces Rook can move //
    // def min = minimum number of spaces Rook can move //
    // must have TONS of if-statements, given high level of contingency in Rook's movements //
    
  def Knight
    method 1: 
      moveForward 2 + moveLeft 1
      moveForward 2 + moveRight 1

    method 2:
      moveBack 2 + moveLeft 1
      moveBack 2 + moveRight 1

    method 3:
      moveLeft 2 + moveForward 1
      moveLeft 2 + moveBack 1

    method 4:
      moveRight 2 + moveForward 1
      moveRight 2 + moveBack 1

  def Bishop
      moveForward + moveLeft
      moveForward + moveRight
      moveBack + moveLeft
      moveBack + moveRight
    // like the Rook, many contingencies restrict the Bishop's movement //

  def King
      method for gamePlay (normal, no threats)
      method for inCheck:
        if [opponent threatens King's space]: <-- need to figure out how to code this.
              move into safe(r) space
              return outofCheck
        else
            return ERROR sound. You cannot move there!
      // one or King-in-Check --> endgame method, CHECKMATE //
      // normal gameplay method below //
      moveForward 1 space + moveLeft 1 space
      moveForward 1 space + moveRight 1 space
      moveBack 1 space + moveLeft 1 space
      moveBack 1 space + moveRight 1 space

  def Queen
      call musical-chess.Bishop or musical-chess.Rook 

BUGS/LOGISTICAL ISSUES, MORE METHODS
1.  Can't use only natural harmonics. Creates duplicates. 
    Error message or no, frequencies will trigger execution of multiple commands and might crash the program. 
    If it doesn't crash, use these duplicates for complex pieces like the knight, 
    which moves across horizontal and vertical axes.

2.  METHODS for capturing pieces
    create more problems with duplicate frequencies.
    too many possible combinations
    If [specific checkmate pattern]:
        [trigger specific set of frequencies]
    elif [other checkmate pattern]:
        [trigger a musical motif]
    more elifs for a large but finite number of checkmate patterns:
        [trigger large but finite no. of leitmotifs]
        [add new checkmate matterns with each new version]

3.  METHODS for player errors:
    a. when a player is in check and makes an impossible move
        [musical equivalent of an error message--BEEP! BEEP!]
    b. when a player attempts to move a piece after putting it down
        [another musical error message]
    c. when a player loses a game - maybe some sound effects, too?
        could be a rude sound--HAHA, LOSER!
        could also be something sad, WOMP, WOMP!

4.  Methods for player successes:
    a. when a player captures their opponent's pieces
        [maybe a bell sound, player associates bell with success]
    b. when a player puts their opponent in check
        [something tense to signal danger for player in check
        and imminent victory for opponent]

THINGS I EXPECT TO INCLUDE IN MY CODE:
Boolean Values for player errors
touch.py <-- or similar script to determine if player has "released" the piece. 
    self.touch (has the player removed their hand?) == None or not None.
    if self.touch == None
        LED == off
        fiddle == None [patch is not operating or frequency has been found]
    else
        LED == on [would look lovely on a glass chessboard]
        fiddle == not None [patch is analyzing frequencies]

Mic needs to "hear" minimum amplitude.
    def minAmp
        // Bypasses the problem of the noise floor to facilitate gameplay//
Mic needs to "hear" maximum amplitude to prevent use of clipping as an input
    def maxAmp
        // Eliminates distorted sounds and loud or close noises from set of possible inputs//
    
    def Release    
        // Cannot move again until opponent has moved//
        // enforces rules for touching and releasing pieces//
    
musical-chess.wahoo for victorious player, musical-chess.wompWomp for losing player
    could trigger sound effects coming from each speaker after all endgame methods have been executed.
